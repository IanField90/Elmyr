apply plugin: 'java'
apply plugin: 'kotlin'
apply plugin: 'maven'
apply plugin: 'jacoco'
apply plugin: 'org.junit.platform.gradle.plugin'
apply plugin: "io.gitlab.arturbosch.detekt"

dependencies {
    // KOTLIN
    compile "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"

    compileOnly 'junit:junit:4.12'

    // TESTS
    testCompile "org.assertj:assertj-core:3.6.2"
    testCompile "com.nhaarman:mockito-kotlin:1.3.0"
    testCompile "io.kotlintest:kotlintest:2.0.1"
    testCompile "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"

    // SPEK
    testCompile "org.jetbrains.spek:spek-api:$spek_version"
    testCompile "org.jetbrains.spek:spek-subject-extension:$spek_version"
    testRuntime "org.jetbrains.spek:spek-junit-platform-engine:$spek_version"
    testRuntime "org.junit.platform:junit-platform-launcher:$junit_platform_version"
    testRuntime("org.junit.vintage:junit-vintage-engine:4.12.0-M4")
}

junitPlatform {
    filters {
        engines {
            include 'spek', 'junit-jupiter', 'junit-vintage'
        }
    }
}


project.afterEvaluate {
    def junitPlatformTestTask = project.tasks.getByName('junitPlatformTest')

    // configure jacoco to analyze the junitPlatformTest task
    jacoco {
        toolVersion = "0.7.8"
        applyTo junitPlatformTestTask
    }

    // create junit platform jacoco task
    def jacocoTask = project.task(type: JacocoReport, "junitPlatformJacocoReport",
            {
                sourceSets sourceSets.main
                sourceDirectories = files(project.sourceSets.main.allSource.srcDirs)
                classDirectories =  files(project.sourceSets.main.output)
//                executionData = files(project.jacocoTestReport.executionData)
                executionData junitPlatformTestTask

                reports {
                    xml.enabled true
                    csv.enabled false
                    html.enabled true
                }
            })

    project.tasks.getByName('check').dependsOn jacocoTask
}

detekt {
    version = "$detekt_version"  // Specify current detekt version
    input = "$input/src/main/kotlin" // input is preconfigured to 'project.projectDir.absolutePath'
    config = "$project.projectDir/detekt.yml" // Use $project.projectDir to navigate inside your project
//    filters = ".*test.*, .*/resources/.*" // What paths to exclude? Use comma oder semicolon to separate
//    rulesets = "other/optional/ruleset.jar" // Custom rule sets can be linked to this, use comma oder semicolon to separate
}

sourceCompatibility = "1.7"
targetCompatibility = "1.7"
